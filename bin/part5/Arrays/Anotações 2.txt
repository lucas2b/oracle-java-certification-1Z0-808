1) Declaração de arrays:

	1)int[] firstArray     = new int[0]; 	     //pode ser de tamanho zero = vazio
	2)int   secondArray[]  = new int[2];	     //squared brackets depois do nome
	3)int   thirdArray[]   = new int[]{1,2,3};	 //declaração com inicialização imediata
	4)int[] fourthArray    = {4,2,6,2}; 	     //anonymous array
	5)int[] fifthArray     = new int[3 * 5 / 2]; //tamanho pode conter expressão matemática (arredondamento pra baixo)
	
2) Método correto de comparação de conteúdo de Arrays:

	1)Arrays.equals(array1, array2)
	2)A comparação array1.equals(array2) só retornará true quando array1 está apontando para array2, ex:
		
		String[] animals = {"Parrot", "Dog", "Cat"};
		String[] myAnimals = animals;
		animals.equals(myAnimals); //true
		
		boolean b = animals == myAnimals; //true (neste caso a referência dos 2 são iguais)
		
3) Método correto de "printar" um Array:
	
	-> Arrays.toString(animals);
	
4) Arrays de qualquer tipo podem ser percorridos com o "For" no estilo "For each loop"

5) ORDENAÇÃO de Arrays:

	-> É possível ordenar todos os tipos primitivos
	-> Método utilizado para ordenação: Arrays.sort(numbers);
	-> Não é possível utilizar ordenação de Arrays de outros Objetos, pois retorna uma exceção
	   "cannot be cast to java.lang.Comparable", a não ser que esse método seja implementado em classe.
	 
6) BUSCA em Arrays:

	-> A busca em Arrays só pode ser utilizada em Arrays ORDENADOS
		-> Funciona com: int, long, float, double
		-> Não Funciona com: byte, short
		-> Método utilizado: Arrays.binarySearch(nomeDoArray, elemento);
		-> Caso o elemento não exista, o método retorna o índice de onde o elemento deveria estar
		   no padrão "-x", o número de índice correto se encontra tirando o sinal de negativo e sub-
		   straindo 1 unidade do número restante, ex: -2 = 1 (o elemento deveria estar no índice 1)
		  
	-> A busca em arrays DESORDENADOS retorna um resultado errado e inválido.


7) Argumentos variáveis:
	
	-> Um método pode ter a assinatura do tipo "metodo(String... arguments)" e receber os parâmetros na sua chamada
	   com os valores separados por vírgula, como por ex: metodo("primeiro", "segundo", "terceiro")
	   Outro meio de realizar o chamamento do método é declarando um array anonymous, ex:
	   metodo(new String[] {"Teste1", "Teste2"});
	   
	-> O método "main" pode ser alterado sem problemas para esse estilo de argumentos variáveis, como por ex:
	   "public static void main(String... args)"
	   
8) Arrays multidimensionais:

	-> Regra: O número de dimensões se dará pelo somatório de "[]" da declaração do tipo
	   ex:
	   int[] umaDimens;
	   int[] duasDimens[];
	   int[] tresDimens[][];
	   
	 -> É possível construir um array assimétrico (número de colunas variáveis por linha), desde que sua ini-
	 cialização seja feita no ato da declração, ex:
	   
	   String[][] myAsymmetricalAray = new String[][] { 
			    { "One", "Two" }, 				     // 1st row 2 columns
				{ "Three", "Four", "Five" }, 		 // 2nd row 3 columns
				{ "Six", "Seven", "Eight", "Nine" }, // 3rd row with 4 columns
				null

		};

9) Propriedades particulares de Arrays:
	
	-> .length
	
10) Os arrays do tipo "int" não podem referenciar um array do tipo "char", não existe essa inter-cambialidade
    entre os arrays de "int" e "char", ex:
    	
    	int[] arr1;
		char[] arr3 = {'a', 'b'};
		arr1 = arr3; //does not compile
		
		já no caso do tipo primitivo sem array, é possível:
		
		int arr1;
		char arr3 = 'a';
		arr1 = arr3; //ok