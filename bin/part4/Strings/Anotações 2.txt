-- Strings --

1) Concatenção de Strings:

	-> É perfeitamente possível somar Strings com "+", como por ex:
	    String str1 = "str1";
		String str2 = "str2";
		String str3 = str1 + str2;
		System.out.println(str3);

	-> No caso de concatenação dentro "System.out.println()":
		Caso 1) Soma de inteiros antes e String depois: A soma é efetuada e o resultado é concatenado com String
		        System.out.println(1 + 2 + "b"); //3b
		   
		Caso 2) String primeiro e soma de inteiros depois: Se a soma não estiver isolada por parênteses, é realizada
		        uma concatenação de tudo
		        System.out.println("result= " + 10 + 20); //result=1020
		   
	-> Modo mais correto de fazer concatenação de "Strings": str2.concat(str2) e o retorno
	   deve ser re-assinalado para uma nova variável.

2) Imutabilidade:

	-> O valor de uma String é passado para outra variável por cópia, portanto a alteração na primeira String
	   não reflete na segunda variável
	
	  
3) String Pool:

	-> Strings declaradas sem a palavra chave "new", são alocadas no String Pool do Java. Outras variáveis que
	 declararem a mesma String sem usar a palavra "new", apontarão para o String Pool e terão o mesmo endereço.
	
	-> Caso que utiliza String Pool:
		String name  = "John";
		String john	 = "Jo" +  "hn";
		
		(name == john) //true
		
		
	-> Caso que NÃO utiliza a String Pool:
		String abc = "abc";
		String ab =  "ab";
		String str =  ab + "c"; //Não utiliza String Pool pois parte da formação é feita por uma variável
		
		if(abc == str) //false
		
4) Métodos de Strings:
	
	2)length()
	
	2)charAt(index i) //No caso de passar um índice fora do comprimento da String, retorna NullPointerException
	
	3)str.indexOf('a')       = índice da primeira ocorrência do caractere
	  str.indexOf('a', 2)    = caractere à partir do index 2
	  str.indexOf("fun")     = retorna o índice do início da String
	  str.indexOf("fun", 10) = retorna o índice do início da String à partir do índice apontado
		
	4)str.substring(1,3)  = índice do início e do fim (não imprime o índice 3, imprime até o 2 inclusive)
	  str.substring(3)    = à partir do índice passado (fim, rabo)
	  str.substring(5, 5) = retorna string vazia
	  str.substring(4, 2) = índice de início > índice final = exception
	  str.substring(1,20) = índice final estoura o comprimento da String = exception
	  
	5)str.toUpperCase() / str.toLowerCase() = devem ser re-assinaladas
	
	6)str1.equals(str2)
	
	7)str1.startsWith("va") / str1.endsWith("ja") = verificam se a String inicia ou termina com certa sequência
	  e retorna um boolean
	  
	8)str1.contains("av") = verifica se a String contém certa sequência e retora um boolean
	
	9)str1.replace('a', 'A')  = substitui um "char"
	  str1.replace("is", "_") = substitui uma "String"
	  
   10)str1.trim() = remove os espaços em branco antes e depois da String
   
   11)str1.concat(str2) = concatena 2 String e retorna uma String nova que deve ser re-associada
   
5) String Builder:

	-> Inicialização com uma String inicial: StringBuilder builder = new StringBuilder("start");
	-> Inicialização com uma capacidade incial: new StringBuilder(100);
	-> myBuilder.append("palavra") = concatena ao fim da sequência
	-> myBuilder.length() 		   = retorna a quantidade de caracteres presentes
	-> myBuilder.capacity()        = retorna a capacidade corrente, que é atualizada quando necessário 
	-> myBuilder.insert(1, "bb")   = insere na posição 1 os caracteres "bb" e empurra a continuação da string para direita
	-> myBuilder.deleteCharAt(3) 	 = deleta 1 caractere na posição indicada
	-> myBuilder.delete(startIndex, finalIndex) = deleta uma sequência de caracteres dentro dos índices especificados
					  startIndex = inclusivo
					  finalIndex = exclusivo
	