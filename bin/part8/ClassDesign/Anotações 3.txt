-- Class Design --

1) Apenas os modificadores "public", "abstract" e "final" são permitidos para classes:

	-> Abstract = não pode ser instanciada
	-> Final = não pode ser herdada por outra
	-> Public = pode ser instanciada em qualquer lugar da aplicação
	-> Ausência de "Public" = modificador de acesso do tipo "private package" (pode ser instanciada apenas no mesmo package)

2) Construtores:
		
	-> Caso nenhum construtor seja declarado, o compilador gera automaticamente um construtor com acesso "public"

	-> Caso a classe tiver uma variável com mesmo nome do parâmetro do método construtor, ela deverá ser referenciada
	   por "this", caso contrário, a referência feita será ao parâmetro do método, ex:
	   
	   private String color;
	
	   public Dog(String color) {
		  this.color = color;
          //color = color //parâmetro recebendo o próprio parâmetro
	   }
	   
	 -> Existe construtor "private"!! Ele proíbe que qualquer outra classe a instancie, porém a própria classe pode
	    instanciá-la através do método "main"
	    
	 -> Em construtores sobrecarregados, é possível invocar um método construtor dentro de outro método construtor utilizando
	    a instrução "this(param1, param2)". Para funcionar, essa chamada deve ser obrigatoriamente a primeira instrução do
	    construtor. A técnica é chamada de "constructor chain". Ex:
	    
	    public Dog(String name) {
			
			//this.name = name;
			//breed = "husky";
			//weight = 30.0;
		
			//Dog(name, "husky"); //does not compile		
			//new Dog(name, "husky"); //creates another Dog
		
			this(name, "husky"); //chamada a outro construtor	
		}
		
		-> "this()" não pode ser usado dentro de métodos "normais" ou "regulares".
		
		-> "this()." não existe e causa erro de compilação.
		
		-> Um constutor que não tenha modificador de acesso é um "private package", ou seja
		   apenas classes do mesmo package podem instanciá-la.
		   
		-> Se uma classe tem apenas um construtor com parâmetros, ele deve ser obrigatoriamente invocado na instancia-
		   ção da classe, caso contrário acusará um erro de compilador.
		
3) Inicializadores de instância:

	-> Existe na declaração de classe, o bloco inicializador de instância denotado por
		
		{
	
 		}
 		
 		Que inicializa os atributos dinâmicos do Objeto.

4) Ordem de inicialização de objetos:

	1) Se há superclasse, a inicializa primeiro
	2) Declaração de variáveis estáticas e inicializadores estáticos em ordem que aparecem
	3) Declaração de variáveis de instância e inicializadores de instância na ordem que aparecem
	4) O Construtor
	
5) Herança:
	
	-> super(); chama o construtor superior (com/sem parâmetros), só pode ser invocado dentro de um dos construtores
	   da hierarquia de herança. Deve ser o PRIMEIRO comando do construtor, caso contrário causa erro de compilação.
	   
	-> O que define o acesso às propriedades do Objeto, é seu tipo e não sua instância! O uso de um tipo de classe 
	   de alta hierarquia, não permitirá o acesso às propriedades do tipo da instância (caso seja uma instância de
	   nível hierárquico mais baixo).
	   
	-> Caso a superclasse tenha apenas construtor(es) com parâmetros, a classe que herda dela deve invocar o constru-
	   tor da classe superior ( super() ) passando os parâmetros necessários.
	   
	-> Os acessos às "propriedades" e aos "métodos" das classes superiores se dão com a palavra chave "super." 
	   seguido de ponto (nunca super().), dessa forma é possível acessar propriedades superiores e invocar métodos,
	   desde que não sejam "private". O uso da palavra "super" é opcional em classes que herdam de outras, já que
	   as propriedades e métodos fazem part do mesmo univero da hierarquia de herança, portanto o acesso por ser feito
	   sem a palavra "super".
	   
	-> "this()" e "super()" não podem ser chamados simultaneamente em um mesmo construtor, caso contrário ocorre um 
	   erro de compilção.
	   
6) Method Overriding: (métodos sobrescritos na hierarquia de Classes)

	-> Lembrar: Sobrecarga de método é ter várias versões de métodos disponíveis, cada versão com sua assinatura, já
	   sobrescrita é redefinir o método em instâncias inferiores da hierarquia de herança contendo a mesma assinatura
	   e o mesmo tipo de retorno
	   
	-> É considerada uma tentativa de SOBRESCRITA de método da Classe superior quando o nome do método e os parâmetros
	   são iguais à definição do método da Classe superior, independente do tipo de retorno! Caso o tipo de retorno não
	   seja igual neste caso, haverá um erro de compilação.
	
	-> A palavra chave para chamar o método superior é "super." (com ponto), tomar cuidado pois se a chamada for realizada
	   apenas pelo nome do método sobrescrito (sem o super.) ocorerrá uma chamada recursiva.
	   
	-> Não é possível sobrescrever métodos "private" e "final"
	
	-> Mesmo alterando o TIPO declarado da variável para a Classe de maior hierarquia, ao executar o método sobrescrito,
	   a preferência será pelo método mais especializado, ou seja, da classe que está sendo instanciada e contém o método
	   sobrescrito. 
	   
	-> Não é obrigatório chamar o método da classe superior dentro do método da classe inferior. A chamada do método mais su-
	   perior, quando feita, pode ser feita em qualquer posição do método da classe inferior, sem causar erros de compilação
	   
	-> Modificadores de acesso: O método reescrito deve ter o mesmo modificador de acesso do método superior, ou um modificador
	   mais permissivo. 
		Ex: O método pai é "protected" e o método filho é "public" (aceitável)
		    O método pai é "protected" e o método filho é "protected" (aceitável)
	   

7) Métodos/Classes abstratos:

	-> Classes declaradas "abstratas" não podem ser instanciadas, e os métodos abstratos, precisam OBRIGATORIAMENTE
	   estarem dentro de classes abstratas.
	   
	-> Classes Abstratas podem estender outras Classes Abstract e Classes regulares.
	
	-> Classes Abstratas podem possuir métodos estáticos implementados.
	   
	-> Métodos abstratos não possuem "corpo" de implementção, apenas declaração, como por exemplo:
	   protected abstract void teste();
	   
	-> A implementação dos métodos "abstratos" se dão em classes que herdam da classe abstrata

	-> Regras para definir métodos abstratos:
		Regra 1) Métodos abstratos apenas podem ser definidos em classes abstratas
		Regra 2) Métodos abstratos não podem ser declarados "private" ou "final"
		Regra 3) Métodos abstratos não podem ser implementados na classe que são declarados
		Regra 4) Implementar métodos abstratos em subclasses, seguem as mesmas regras de "sobrescrita de método"
				 (ex: a assinatura do método deve ser a mesma e o modificador a mesma regra)
				 
	-> Uma classe herdada da classe pai abstract não tem a obrigação de implementar o método abstrato, caso esta
	   seja uma classe abstrata também! Porém por sua vez, ela pode definir outros métodos abstratos.
	   
	-> Uma classe não pode ser "abstract" e "final" ao mesmo tempo (erro de compilação)
	
	-> Uma classe que herda de uma classe abstract que por sua vez herdou de outra classe abstract, deve implementar
	   TODOS os métodos abstratos da cadeia de hierarquia de classes abstract
	   
	-> "super" não pode ser utilizado em um método estático
	
	-> Atenção para este comportamento!!! O método abstrato pode ser invocado na mesma classe "abstract", 
	   porém por outro método regular, ex:
	   
		abstract class Def {

			protected abstract void teste();
	
			public void chamadaDeImplementacao() {
				teste(); //chamada de método abstract
			}
		}
		
		Neste caso, a execução de "teste()" se dará na classe que o implementou e que chamou o método
		"super.chamadaDeImplementacao()" (verificar classe Implementation)
		
8) Interfaces:

	-> É considerada uma tentativa de implementação de método da Interface quando o nome do método e os parâmetros
	   são iguais à definição de método da Interface, independente do tipo de retorno! Caso o tipo de retorno não
	   seja igual neste caso, haverá um erro de compilação.

	-> Modificadores de acesso da Interface: Podem ser "public" ou "private package", não podem ser "private"
	   nem "protected"
	   
	-> Uma Interface pode estender outra Interface, porém não pode estender uma Classe

	-> Variáveis: Interfaces Pode conter "variáveis", porém por padrão são "public static final", por ex:
	   	
	   	int DEFAULT_HEIGHT = 5;
	   		ou
	   	public static final int DEFAULT_HEIGHT = 5;
	   	
	   	1) "private" e "protected" causam erros de compilação!
	   	2) pode conter "public static final", ou apenas 1 ou mis desses modificadores, ou até mesmo nenhum
	   
	   
	-> Declaração de métodos: Por padrão os métodos declarados são "public abstract", por ex:
	   
	   	void fly(int height); //pode vir precedido ou não de "public abstract" ou apenas 1 dos 2
	   
	   	1) Não podem ser "private" nem "protected", apenas podem ser "public abstract"
	   	
	-> As variáveis da interface podem ser utilizadas livremente dentro da classe que a implementa
	
	-> O método que implementa os métodos da interface, devem vir anotados com "@Override"
	
	-> Uma classe "abstract" que implemente uma Interface, não é obrigada a implementar nada da Interface!
	
	-> Os métodos da interface devem ser implementados em algum ponto da hierarquia de classes, ou seja, não é
	obrigatório uma classe que implementa uma interface, implementar um método da interface, porém uma classe que herde desta
	classe, deve implementá-lo, ex:
	
		Interface (declaração de método) 
		-> Classe1 (implementa interface mas não o método) 
		-> Classe2 (herda a Classe1 e implementa o método da Interface)
		
	-> Atenção: Um método de Interface pode ser implementado em uma classe e sobrescrito em uma classe seguinte!!!
	
	-> Uma classe pode implementar mais de uma Interface, porém, nestas Interfaces, não podem haver 2 métodos exatamente
	   iguais, sob pena de gerar conflito na classe implementadora e ocasionar um erro de compilação.
	
	-> Uma classe pode estender de outra classe e simultaneamente implementar uma interface
		1) Única ordem aceita na declaração de classe:
		   class ImplementacaoDeInterface2 extends ImplementacaoDeInterface implements SecondInterface
		   
	-> Métodos Default: Uma interface pode ter métodos com corpo e com uma implementação default e fica à cargo
	   da classe implementadora utilizá-los ou sobrescrevê-los. É possível invocar a implementação default da Interface
	   na classe implementadora, através da sintaxe NomeDaInterface.super.nomeDoMetodo(), como por ex:
	   	DefaultInterfaceMethods.super.metodoPadrao();
	   	
	-> Uma Interface pode herdar de outra, e essa por sua vez, pode sobrescrever métodos default de hierarquias anteriores
	
	-> Uma Interface pode ter método estáticos desde que com corpo e implementados, pois não suporta apenas definição de método estático,
	
	-> Uma Classe pode vir a implementar 2 Interfaces que contenham 2 métodos de mesmo nome e mesma assinatura, já que não haverá conflito
	   de invocação, uma vez que para invocar métodos estáticos é necessário referenciar a Classe/Interface com letra maiúscula, ex:
	   		
	   		InterfaceTeste1.metodoEstatico();
	   		InterfaceTeste2.metodoEstatico();
	   

9) Polimorfismo:

	-> Polimorfismo de métodos por HERANÇA: Quando os métodos da classe pai são abstract e as classes derivadas
	   são obrigadas a implementar esses métodos, assim alguns métodos de uma classe testadora podem receber
	   como argumento o supertipo como argumento e em seu interior invocar os métodos próprios de cada implementação
	   que possuem todos o mesmo nome e assinatura.
	
	-> Polimorfismo de métodos por INTERFACE: o mesmo acontece com classes que implementam interfaces, os métodos 
	   implementados por estas classes, estarão disponíveis para a assinatura de outros métodos através do supertipo
	   de classe.
	

	-> O que é possível fazer com polimorfismo?
	
		1) Alternar entre vários tipos de Instância (ArrayList, LinkedList, etc...) sem precisar mudar o Tipo do Objeto 
		   (Isso é vantajoso, já que cada instância implementa os mesmos métodos, porém cada um com suas
		   particularidades, por exemplo, uma lista Linkedlist pode sofrer grandes alterações de alocação sem perder performance, 
		   pois sua implementação é baseada em listas ligadas, para isso basta trocar o tipo de instância.)
		   Este tipo de implementação é chamado de "Métodos Virtuais". 
		 
		2) Um método pode receber como parâmetro um supertipo 
		   (Polymorphic Parameter)
		
		3) Uma lista pode ser de um supertipo e receber tipos herdados 
		   (Uma Lista do Tipo e instância "Pessoa" pode armazenar "Funcionários", "Gerentes", "Tercerizados", etc...)
		
		4) É possível percorrer uma lista de supertipos em um "for each"
		

10) Diferentes tipos de declaração de Objetos com hierarquia:


	Opção de declaração 1) Tipo do Objeto = Tipo da Instância (polimorfismo engessado)
	
			 			   Vantagem: permite acessar propriedades do tipo da Instância sem realizar um downcasting.
			 			   Desvantagem: não permite alternar o tipo da Instância na declaração e nem realizar aponta-
			 			   mento da variável para outro tipo no decorrer do código. 
			 
	Opção de declaração 2) Tipo do Objeto > Tipo da Instância (polimorfismo real)
	
						   Desvantagem: Não permite acessar propriedades do tipo da Instância. 
						   				(a não ser com downcasting)
						   Vantagem: Permite alternar o tipo da Instância no momento da declaração. (caso de List)
						             Permite alterar o apontamento da variável para uma classe do "tipo irmão" 
						             da hierarquia mais adiante no código
						   
						   
11) Métodos Virtuais:
	
	Acontece quando se realiza uma chamada de método da classe do supertipo e dentro deste método existe uma chamada
	a um método abstract dentro desta classe, assim sendo, o método a ser executado será o da classe que
	foi instanciada. Ex:
	
		Animal rabbit = new Rabbit();
		rabbit.printDetails(); //método que só existe na classe Animal
		
		class Animal{
		
			protected abstract void printName();
			
			public void printDetails(){
				printName(); //método virtual = o executor será definido conforme o Tipo da Instância
			}
		}
		
