1) O "tipo" ArrayList vem do pacote "java.util.ArrayList;"

2) Os tipos da ArrayList/List contém apenas OBJETOS, nunca tipos primitivos!

3) Método prático de criar listas (imutáveis/fixed size) à partir de Arrays:
	List<String>  numsList    = Arrays.asList("500", "10", "9", "50", "40");
	List<Integer> integerList = Arrays.asList(5, 4, 8, 10, 11, 7, 3);
	-> Permitido realizar "Collections.sort()" em cima dessa lista
	
4) Formatos aceitos de declaração de ArrayList:
   	
   	1) Formato 1: List lista = new ArrayList(); 	       //Sem diamante nos 2 lados
   	2) Formato 2: List lista = new ArrayList<>(); 	       //Apenas diamante vazio na direita
    3) Formato 3: List lista = new ArrayList<Integer>();   //Diamante com Tipo no lado direito e sem Diamante no lado esquerdo
    
    4) Formato 4: List<Integer> lista = new ArrayList();   //Diamante com Tipo apenas no lado esquerdo
    5) Formato 5: List<Integer> lista = new ArrayList<>(); //Diamante com Tipo no lado esquerdo e Diamante vazio no lado direito
    
    -> Regra 1: Quando houver o diamante na esquerda, o tipo é obrigatório
    -> Regra 2: Nada de tipo é obrigatório na direita 
    
    assim não compila...
    
    1) Não compila 1: List<> lista = new ArrayList();   //Apenas Diamante vazio na esquerda
    2) Não compila 2: List<> lista = new ArrayList<>(); //Diamante vazio nos 2 lados
    
	

5) ArrayList Methods:

	1)arrayList.add("dog")
	   ->pets.add(1, "parrot"); //Adição passando o índice: 
								 //O que estava na posição 1 foi movido para a 2, assim como todo o restante para adiante
	
	2)arrayList.remove("parrot");
	   -> pets.remove(2);		   //remoção apontando o índice
	   -> pets.remove(10);         //provoca exceção caso o índice esteja vazio
	   -> Qualquer tentativa de remoção em uma lista vazia (size=0), em qualquer posição, retornará uma exceção.
	  
	3)arrayList.set(0, "alterado") // altera o valor no índice 
								   //(não empurra o conteúdo existente para o lado, apenas o substitui)
								   
	   -> pets.set(10, "oi");      //provoca exceção caso o índice esteja vazio
	
	
	4)arrayList.isEmpty(); (sem variações)
	
	5)arrayList.size();    (sem variações)
	
	6)arrayList.clear();   (sem variações)
	
	7)arrayList.contains("cat");    //true ou false
	
	8)arrayList.equals(arrayList2); //true ou false
	
	
6) Utilizando classes "Wrapper" (Integer, Double, String, etc...) em ArrayList:
	
	-> Adição e Remoção com de VALORES "Double":
	
		List<Double> doubleList = new ArrayList();
		doubleList.add(66.6); 			      //adição com autoboxing
		doubleList.remove(66.6); 		      //remoção do "VALOR" com autoboxing (caso não exista, retorna boolean false)
		doubleList.add(new Double(55.10));    //adição com boxing
		doubleList.remove(new Double(55.10)); //remoção do "VALOR" com boxing (caso não exista, retorna boolean false)
			
	-> Caso que pode provocar exceção:
	   Adicionar "null" em uma lista de Integer, e após tentar o recuperar o valor via índice para um tipo "int", ex:
	   
	   List<Integer> listaInteiros = new ArrayList();
	   listaInteiros.add(null);
	   int itemDaLista = listaInteiros.get(0); //exception
		   
	-> Em uma lista de Integer, é possível remover um ítem pelo seu VALOR, porém é necessário utilizar o seguinte parâmetro:
	   listaInteiros.remove(new Integer(10));
	   
	   
7) Conversão de Lista para Array e vice-versa:
	
	-> Lista para Array:
	
		Forma 1) Object[] arrayDeObjetos = lista.toArray(); //Retorna um Array de Objeto que deve ser convertido
		
		Forma 2) String[] arrayDeString  = lista.toArray(new String[0]); //Retorna um Array do tipo especificado
																		 //no argumento. O tamanho passado em [],
																		 //vai ser automaticamente atualizado
																		 
	-> Array para Lista: Existe uma ligação entre as 2 variáveis, a alteração em 1 reflete na outra
		
		Forma 1) String[] petsArray = new String[] {"dog", "cat", "parrot"};
				 List<String> listOfPets = Arrays.asList(petsArray);
				 
		Forma 2) List<String> minhaLista = Arrays.asList("item1", "item2", "item3"); //forma simplificada de criar
																					 //uma lista e adicionar elementos
																					 
		-> Uma operação de "set" na lista, afeta o array associado, por ex:
		   minhaLista.set(0, "alterado"), reflitirá em meuArray[0] = "alterado"
		   
		-> Operações que causam exceções:
			1) listOfPets.add("bird"); //"lista tem tamanho fixo"
			2) listOfPets.remove(0);   //"Operação não suportada"
			
8) Ordenação em ArrayList:

	-> Collections.sort(listaDeStringsNumericas); //ordena alfabeticamente ou numericamente crescente (inteiros)


9) Busca em ArrayList:

	-> A mesma regra de busca vale tanto para Arrays quanto ArraList, a lista deve estar ordenada para
	   que a busca retorne um resultado válido e utilizável.
	   
	-> A mesma regra de elemento não encontrado, vale para ArrayList também. Caso a lista esteja ordenada e o
	   elemento não tenha sido encontrado, retorna um valor negativo que aponta o índice em que este elemento deve-
	   ria estar para preservar a ordem.
	
	-> Método utilizado: Collections.binarySearch(numsList, "10") //retorna o index (int) do elemento encontrado
	
	
10) Iteração sobre ArrayList:

	-> Método 1: "For" convencional utilizando variável de controle, "get(i)" e ".size()" para controlar o loop
				  É permitido adicionar e remover ítens da lista dentro do laço de execução
	
	-> Método 2: "For each"(não permite remover/adicionar elementos dentro do loop = causa exceção. Apenas realizar "set()")
	
	-> Método 3: "For convencional" utilizando uma variável de controle "Iterator" (permite remover o ítem atual), ex:
				 
				 for(Iterator<Integer> iterator = numbers.iterator(); iterator.hasNext(); ) {
			
						Integer number = iterator.next();
						System.out.println(number);
						iterator.remove(); //remove o ítem atual
				 }
				 
	-> Método 4: "For convencional" utilizando uma variável de controle "ListIterator" 
				  
				  1) possível remover o ítem atual: listIterator.remove();
				  2) possível adicionar na lista  : listIterator.add(3); (provoca loop infinito)
				  3) possível iniciar o iterador em um certo índice: numbers.listIterator(3);
				  4) possível checar se existe um ítem anterior para controle do loop decrescente:
				     listIterator.hasPrevious()			  
				  5) possível acessar o item anterior: listIterator.previous() 
	 			